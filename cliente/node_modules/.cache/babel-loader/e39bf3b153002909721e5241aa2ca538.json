{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/progra web chat/client/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = () => {\n  _s();\n\n  const location = useLocation(); //states\n\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]); //puerto\n\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); //seteamos los valores de name y room de acuerdo con lo que el user ha puesto\n\n    setName(name);\n    setRoom(room); //creamos el socket\n\n    socket = io(ENDPOINT); //eventos de socket\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]); //funcion para administrar los mensajes\n\n  useEffect(() => {\n    socket.on(\"message\", () => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hola\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Chat, \"QddaYdophg5l4f2RKMrAsGqIZKA=\", false, function () {\n  return [useLocation];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/progra web chat/client/src/components/Chat.js"],"names":["React","useState","useEffect","queryString","io","useLocation","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CADiB,CAEjB;;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC,CANiB,CAOjB;;AACA,QAAMgB,QAAQ,GAAG,gBAAjB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEO,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBR,WAAW,CAACe,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAvB,CADc,CAEd;;AACAT,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CAJc,CAKd;;AACAL,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,CAAX,CANc,CAOd;;AACAX,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAAEX,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CAAE,CAA5C;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AACAd,MAAAA,MAAM,CAACe,GAAP;AACD,KAHD;AAID,GAbQ,EAaN,CAACJ,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAbM,CAAT,CAViB,CAwBjB;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBN,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAFD;AAGD,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;AAMA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhCD;;GAAMR,I;UACaF,W;;;KADbE,I;AAiCN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router\";\n\nlet socket;\n\nconst Chat = () => {\n  const location = useLocation();\n  //states\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  //puerto\n  const ENDPOINT = \"localhost:5000\";\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n    //seteamos los valores de name y room de acuerdo con lo que el user ha puesto\n    setName(name);\n    setRoom(room);\n    //creamos el socket\n    socket = io(ENDPOINT);\n    //eventos de socket\n    socket.emit(\"join\", { name, room }, () => {});\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  //funcion para administrar los mensajes\n  useEffect(() => {\n    socket.on(\"message\", () => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  return <h1>Hola</h1>;\n};\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}